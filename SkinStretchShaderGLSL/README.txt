TERMS OF NON-COMMERCIAL USE    

NON-COMMERCIAL USE ONLY: By downloading this software you agree to use the software contained herein for internal, non-commercial research, evaluation or testing purposes only. Any use of the data generated by the software or its contents to manufacture or sell products or technologies (or portions thereof) either directly or indirectly for any direct or indirect for-profit purposes is strictly prohibited. Subject to the above conditions, this software is provided under the BSD-3 license, a copy of which is contained with the source or object code files downloaded. 

CITATION: By downloading this software you agree to reference the publication Skin Microstructure Deformation with Displacement Map Convolution (http://gl.ict.usc.edu/Research/SkinStretch/) and acknowledge Koki Nagano, Graham Fyffe, Oleg Alexander, Jernej Barbic, Hao Li, Abhijeet Ghosh, and Paul Debevec as the source of the software and any data generated in any publications reporting use of it or any manual or document. A copy of all reports and papers that are for public or general release that use the data generated must be forwarded immediately upon release or publication to Kathleen Haase (Haase@ict.usc.edu).

For commercial license pricing and annual commercial update and support pricing, please contact:
Taylor Phillips
USC Stevens Institute for Innovation
University of Southern California
1150 S. Olive Street, Suite 2300
Los Angeles, CA 90115, USA
Tel: +1 213-821-0943
Fax: +1 213-821-5001
Email: taylorp@stevens.usc.edu

////////////////////////////////////////////////////////////////////////////////////////
BSD-3 License

Copyright 2017 University of Southern California
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

##############################################
GLSL shaders implementation for 
"Skin Microstructure Deformation With Displacement Map Conovlution"
Koki Nagano, Graham Fyffe, Oleg Alexander, Jernej Barbic, Hao Li, Abhijeet Ghosh, Paul Debevec,
USC Institute for Creative Technologies, University of Southern California, Imperial College London
ACM Transactions on Graphics (SIGGRAPH 2015)
http://gl.ict.usc.edu/Research/SkinStretch/
koki.nagano0219@gmail.com


##############################################
>>computeStressShader.*
This implements computations of per-pixel anisotropic stretch that is used in displacement map convolution, detailed in 
section 5 "Applying to a Novel Surface Animation" in the paper. The shader assumes that the per-vertex 2x2 linear transform
T that maps a reference triangle to the deformed in Tangent space is already computed in CPU, and is passed by
as vertex attributes. The T matrix is computed per-triangle, and may be blended to per-vertex by averaging. 

>>Vertex shader:
Input: 
-_Tr0: 1st row of T
-_Tr1: 2nd row of T
Output: per-pixel interpolation of the matrix

>>Fragment shader:
Input:
-Tr0: 1st row of T
-Tr1: 2nd row of T
Output: perform SVD, and extract major/minor stretch, and major axis from the 2x2 matrix T
 
##############################################
>>convolutionShader.*
This implements anisotropic displacement map convolution as 1D convolution in two sequential passes 
to mimic 2D anisotropic convolution. It assumes that the per-pixel anisotripic strain is 
already computed by computeStressShader.*, and conversion matrix QR^t in equation (13) that converts
values in world coordinate to UV texture coordinates in CPU. 

>>Vertex shader:
Input: 
-MagQRt_: magnitude of precomputed QR^t matrix that converts unit from world scale to uv unit
Output: per-pixel interpolation of the above

>>Fragment shader:
Input: 
-MagQR^t: per-pixel interpolation of the magnitude of QR^t matrix,  
-stressMap: precomputed anisotropic stretch map
-dispSampler: neutral displacement for the first pass, and pre-convolved displacement in the major 
              direction for the second pass
-isStretching: flag to switch on/off dynamic displacement
-secondAxis: flag if we are processing major or minor axis

Output: converts anisotropic stretch to convolution kernel parameters alpha, and sigma as in equation (8), and (9)
in the paper, performs 1D convolution in a major (first pass) or minor (second pass) axis, and 
outputs convolved displacement.  

##############################################

